import { describe, expect, test } from "vitest";
import parseEberbanNumber, { getOffset, getVowelPosition, getVowelScore } from ".";

describe("unit tests: expected input", () => {
    describe("Get offset", () => {
        test.each([
            [1, 0],
            [2, 4],
            [3, 24],
            [4, 104],
            [5, 424],
        ])("%d-digit number is offset by %d", (vowelsLength, offset) => {
            expect(getOffset(vowelsLength)).toBe(offset);
        })
    });
    describe("Get vowel position", () => {
        test.each([
            { array: ["i"], index: 0, output: 0 },
            { array: ["e"], index: 0, output: 1 },
            { array: ["a"], index: 0, output: 2 },
            { array: ["o"], index: 0, output: 3 },
            { array: ["u"], index: 0, output: 4 },
            { array: ["i","e"],  index: 1, output: 1 },
            { array: ["e", "o"], index: 0, output: 1 },
            { array: ["a", "u", "o"], index: 1, output: 3 },
            { array: ["u", "i", "e"], index: 1, output: 0 },
        ])("index $index of $array -> $output", ({ array, index, output }) => {
            expect(getVowelPosition(array[index], index, array)).toBe(output);
        });
    });
    describe("Get vowel score", () => {
        test.each([
            { length: 1, vowelPosition: 0, output: 0  },
            { length: 1, vowelPosition: 1, output: 1  },
            { length: 1, vowelPosition: 2, output: 2  },
            { length: 1, vowelPosition: 3, output: 3  },
            { length: 1, vowelPosition: 4, output: 4  },
            { length: 2, vowelPosition: 0, output: 0  },
            { length: 2, vowelPosition: 1, output: 4  },
            { length: 2, vowelPosition: 2, output: 8  },
            { length: 2, vowelPosition: 3, output: 12 },
            { length: 2, vowelPosition: 4, output: 16 },
            { length: 3, vowelPosition: 0, output: 0  },
            { length: 3, vowelPosition: 1, output: 16 },
            { length: 3, vowelPosition: 2, output: 32 },
            { length: 3, vowelPosition: 3, output: 48 },
            { length: 3, vowelPosition: 4, output: 64 },
        ])("First of $length: $vowelPosition -> $output", ({ length, vowelPosition, output }) => {
            expect(getVowelScore(vowelPosition, 0, Array(length))).toBe(output);
        });
    });
})

describe("integration: expected input", () => {
    describe("1-digit numbers", () => {
        test.each([
            ["ti", 0],
            ["te", 1],
            ["ta", 2],
            ["to", 3],
            ["tu", 4],
        ])("%s -> %d", (eberbanNumber, decimalNumber) => {
            expect(parseEberbanNumber(eberbanNumber)).toBe(decimalNumber);
        });
    });
    describe("2-digit numbers", () => {
        test.each([
            ["tie",  5],
            ["tia",  6],
            ["tio",  7],
            ["tiu",  8],
            ["tei",  9],
            ["tea", 10],
            ["teo", 11],
            ["teu", 12],
            ["tai", 13],
            ["tae", 14],
            ["tao", 15],
            ["tau", 16],
            ["toi", 17],
            ["toe", 18],
            ["toa", 19],
            ["tou", 20],
            ["tui", 21],
            ["tue", 22],
            ["tua", 23],
            ["tuo", 24],
        ])("%s -> %d", (eberbanNumber, decimalNumber) => {
            expect(parseEberbanNumber(eberbanNumber)).toBe(decimalNumber);
        });
    });
    describe("3-digit numbers", () => {
        test.each([
            ["tiei", 25],
            ["tiea", 26],
            ["tieo", 27],
            ["tieu", 28],
            ["tiai", 29],
            ["tiae", 30],
            ["tiao", 31],
            ["tiau", 32],
            ["tioi", 33],
            ["tioe", 34],
            ["tioa", 35],
            ["tiou", 36],
            ["tiui", 37],
            ["tiue", 38],
            ["tiua", 39],
            ["tiuo", 40],
            ["teie", 41],
            ["teia", 42],
            ["teio", 43],
            ["teiu", 44],
            ["teai", 45],
            ["teae", 46],
            ["teao", 47],
            ["teau", 48],
            ["teoi", 49],
            ["teoe", 50],
            ["teoa", 51],
            ["teou", 52],
            ["teui", 53],
            ["teue", 54],
            ["teua", 55],
            ["teuo", 56],
            ["taie", 57],
            ["taia", 58],
            ["taio", 59],
            ["taiu", 60],
            ["taei", 61],
            ["taea", 62],
            ["taeo", 63],
            ["taeu", 64],
            ["taoi", 65],
            ["taoe", 66],
            ["taoa", 67],
            ["taou", 68],
            ["taui", 69],
            ["taue", 70],
            ["taua", 71],
            ["tauo", 72],
            ["toie", 73],
            ["toia", 74],
            ["toio", 75],
            ["toiu", 76],
            ["toei", 77],
            ["toea", 78],
            ["toeo", 79],
            ["toeu", 80],
            ["toai", 81],
            ["toae", 82],
            ["toao", 83],
            ["toau", 84],
            ["toui", 85],
            ["toue", 86],
            ["toua", 87],
            ["touo", 88],
            ["tuie", 89],
            ["tuia", 90],
            ["tuio", 91],
            ["tuiu", 92],
            ["tuei", 93],
            ["tuea", 94],
            ["tueo", 95],
            ["tueu", 96],
            ["tuai", 97],
            ["tuae", 98],
            ["tuao", 99],
            ["tuau", 100],
            ["tuoi", 101],
            ["tuoe", 102],
            ["tuoa", 103],
            ["tuou", 104],
        ])("%s -> %d", (eberbanNumber, decimalNumber) => {
            expect(parseEberbanNumber(eberbanNumber)).toBe(decimalNumber);
        });
    });
    describe("4-digit numbers", () => {
        test.each([
            ["tieie", 105],
            ["tieia", 106],
            ["tieio", 107],
            ["tieiu", 108],
            ["tieai", 109],
            ["tieae", 110],
            ["tieao", 111],
            ["tieau", 112],
            ["tieoi", 113],
            ["tieoe", 114],
            ["tieoa", 115],
            ["tieou", 116],
            ["tieui", 117],
            ["tieue", 118],
            ["tieua", 119],
            ["tieuo", 120],
            ["tiaie", 121],
            ["tiaia", 122],
            ["tiaio", 123],
            ["tiaiu", 124],
            ["tiaei", 125],
            ["tiaea", 126],
            ["tiaeo", 127],
            ["tiaeu", 128],
            ["tiaoi", 129],
            ["tiaoe", 130],
            ["tiaoa", 131],
            ["tiaou", 132],
            ["tiaui", 133],
            ["tiaue", 134],
            ["tiaua", 135],
            ["tiauo", 136],
            ["tioie", 137],
            ["tioia", 138],
            ["tioio", 139],
            ["tioiu", 140],
            ["tioei", 141],
            ["tioea", 142],
            ["tioeo", 143],
            ["tioeu", 144],
            ["tioai", 145],
            ["tioae", 146],
            ["tioao", 147],
            ["tioau", 148],
            ["tioui", 149],
            ["tioue", 150],
            ["tioua", 151],
            ["tiouo", 152],
            ["tiuie", 153],
            ["tiuia", 154],
            ["tiuio", 155],
            ["tiuiu", 156],
            ["tiuei", 157],
            ["tiuea", 158],
            ["tiueo", 159],
            ["tiueu", 160],
            ["tiuai", 161],
            ["tiuae", 162],
            ["tiuao", 163],
            ["tiuau", 164],
            ["tiuoi", 165],
            ["tiuoe", 166],
            ["tiuoa", 167],
            ["tiuou", 168],
            ["teiei", 169],
            ["teiea", 170],
            ["teieo", 171],
            ["teieu", 172],
            ["teiai", 173],
            ["teiae", 174],
            ["teiao", 175],
            ["teiau", 176],
            ["teioi", 177],
            ["teioe", 178],
            ["teioa", 179],
            ["teiou", 180],
            ["teiui", 181],
            ["teiue", 182],
            ["teiua", 183],
            ["teiuo", 184],
            ["teaie", 185],
            ["teaia", 186],
            ["teaio", 187],
            ["teaiu", 188],
            ["teaei", 189],
            ["teaea", 190],
            ["teaeo", 191],
            ["teaeu", 192],
            ["teaoi", 193],
            ["teaoe", 194],
            ["teaoa", 195],
            ["teaou", 196],
            ["teaui", 197],
            ["teaue", 198],
            ["teaua", 199],
            ["teauo", 200],
            ["teoie", 201],
            ["teoia", 202],
            ["teoio", 203],
            ["teoiu", 204],
            ["teoei", 205],
            ["teoea", 206],
            ["teoeo", 207],
            ["teoeu", 208],
            ["teoai", 209],
            ["teoae", 210],
            ["teoao", 211],
            ["teoau", 212],
            ["teoui", 213],
            ["teoue", 214],
            ["teoua", 215],
            ["teouo", 216],
            ["teuie", 217],
            ["teuia", 218],
            ["teuio", 219],
            ["teuiu", 220],
            ["teuei", 221],
            ["teuea", 222],
            ["teueo", 223],
            ["teueu", 224],
            ["teuai", 225],
            ["teuae", 226],
            ["teuao", 227],
            ["teuau", 228],
            ["teuoi", 229],
            ["teuoe", 230],
            ["teuoa", 231],
            ["teuou", 232],
            ["taiei", 233],
            ["taiea", 234],
            ["taieo", 235],
            ["taieu", 236],
            ["taiai", 237],
            ["taiae", 238],
            ["taiao", 239],
            ["taiau", 240],
            ["taioi", 241],
            ["taioe", 242],
            ["taioa", 243],
            ["taiou", 244],
            ["taiui", 245],
            ["taiue", 246],
            ["taiua", 247],
            ["taiuo", 248],
            ["taeie", 249],
            ["taeia", 250],
            ["taeio", 251],
            ["taeiu", 252],
            ["taeai", 253],
            ["taeae", 254],
            ["taeao", 255],
            ["taeau", 256],
            ["taeoi", 257],
            ["taeoe", 258],
            ["taeoa", 259],
            ["taeou", 260],
            ["taeui", 261],
            ["taeue", 262],
            ["taeua", 263],
            ["taeuo", 264],
            ["taoie", 265],
            ["taoia", 266],
            ["taoio", 267],
            ["taoiu", 268],
            ["taoei", 269],
            ["taoea", 270],
            ["taoeo", 271],
            ["taoeu", 272],
            ["taoai", 273],
            ["taoae", 274],
            ["taoao", 275],
            ["taoau", 276],
            ["taoui", 277],
            ["taoue", 278],
            ["taoua", 279],
            ["taouo", 280],
            ["tauie", 281],
            ["tauia", 282],
            ["tauio", 283],
            ["tauiu", 284],
            ["tauei", 285],
            ["tauea", 286],
            ["taueo", 287],
            ["taueu", 288],
            ["tauai", 289],
            ["tauae", 290],
            ["tauao", 291],
            ["tauau", 292],
            ["tauoi", 293],
            ["tauoe", 294],
            ["tauoa", 295],
            ["tauou", 296],
            ["toiei", 297],
            ["toiea", 298],
            ["toieo", 299],
            ["toieu", 300],
            ["toiai", 301],
            ["toiae", 302],
            ["toiao", 303],
            ["toiau", 304],
            ["toioi", 305],
            ["toioe", 306],
            ["toioa", 307],
            ["toiou", 308],
            ["toiui", 309],
            ["toiue", 310],
            ["toiua", 311],
            ["toiuo", 312],
            ["toeie", 313],
            ["toeia", 314],
            ["toeio", 315],
            ["toeiu", 316],
            ["toeai", 317],
            ["toeae", 318],
            ["toeao", 319],
            ["toeau", 320],
            ["toeoi", 321],
            ["toeoe", 322],
            ["toeoa", 323],
            ["toeou", 324],
            ["toeui", 325],
            ["toeue", 326],
            ["toeua", 327],
            ["toeuo", 328],
            ["toaie", 329],
            ["toaia", 330],
            ["toaio", 331],
            ["toaiu", 332],
            ["toaei", 333],
            ["toaea", 334],
            ["toaeo", 335],
            ["toaeu", 336],
            ["toaoi", 337],
            ["toaoe", 338],
            ["toaoa", 339],
            ["toaou", 340],
            ["toaui", 341],
            ["toaue", 342],
            ["toaua", 343],
            ["toauo", 344],
            ["touie", 345],
            ["touia", 346],
            ["touio", 347],
            ["touiu", 348],
            ["touei", 349],
            ["touea", 350],
            ["toueo", 351],
            ["toueu", 352],
            ["touai", 353],
            ["touae", 354],
            ["touao", 355],
            ["touau", 356],
            ["touoi", 357],
            ["touoe", 358],
            ["touoa", 359],
            ["touou", 360],
            ["tuiei", 361],
            ["tuiea", 362],
            ["tuieo", 363],
            ["tuieu", 364],
            ["tuiai", 365],
            ["tuiae", 366],
            ["tuiao", 367],
            ["tuiau", 368],
            ["tuioi", 369],
            ["tuioe", 370],
            ["tuioa", 371],
            ["tuiou", 372],
            ["tuiui", 373],
            ["tuiue", 374],
            ["tuiua", 375],
            ["tuiuo", 376],
            ["tueie", 377],
            ["tueia", 378],
            ["tueio", 379],
            ["tueiu", 380],
            ["tueai", 381],
            ["tueae", 382],
            ["tueao", 383],
            ["tueau", 384],
            ["tueoi", 385],
            ["tueoe", 386],
            ["tueoa", 387],
            ["tueou", 388],
            ["tueui", 389],
            ["tueue", 390],
            ["tueua", 391],
            ["tueuo", 392],
            ["tuaie", 393],
            ["tuaia", 394],
            ["tuaio", 395],
            ["tuaiu", 396],
            ["tuaei", 397],
            ["tuaea", 398],
            ["tuaeo", 399],
            ["tuaeu", 400],
            ["tuaoi", 401],
            ["tuaoe", 402],
            ["tuaoa", 403],
            ["tuaou", 404],
            ["tuaui", 405],
            ["tuaue", 406],
            ["tuaua", 407],
            ["tuauo", 408],
            ["tuoie", 409],
            ["tuoia", 410],
            ["tuoio", 411],
            ["tuoiu", 412],
            ["tuoei", 413],
            ["tuoea", 414],
            ["tuoeo", 415],
            ["tuoeu", 416],
            ["tuoai", 417],
            ["tuoae", 418],
            ["tuoao", 419],
            ["tuoau", 420],
            ["tuoui", 421],
            ["tuoue", 422],
            ["tuoua", 423],
            ["tuouo", 424],
        ])("%s -> %d", (eberbanNumber, decimalNumber) => {
            expect(parseEberbanNumber(eberbanNumber)).toBe(decimalNumber);
        });
    });
});
